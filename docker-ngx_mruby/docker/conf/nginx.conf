# this is based on https://github.com/matsumoto-r/docker-ngx_mruby
daemon off;
user daemon;
master_process off;
worker_processes 1;

events {
    worker_connections  1024;
}

http {
    access_log    /var/log/nginx/access.log;
    error_log     /var/log/nginx/error.log error;
    include       mime.types;
    default_type  application/octet-stream;

    sendfile           on;
    keepalive_timeout  65;

    upstream s_rack {
        server rack;
    }

    server {
        listen       80;
        server_name  localhost;

        location / {
            root   html;
            index  index.html index.htm;
        }

        location /mruby-hello {
            mruby_content_handler_code 'Nginx.echo "server ip: #{Nginx::Connection.new.local_ip}: hello ngx_mruby world."';
        }

        location /mruby-test {
            mruby_content_handler /usr/local/nginx/hook/test.rb;
        }

#        location /mruby-proxy {
#            mruby_set $backend /usr/local/nginx/hook/proxy.rb;
#            proxy_pass http://$backend;
#        }

        # insert "MRUBY-HOGE" header for request
        location /mruby-header-inserted {
            mruby_set_code $hoge '
              r = Nginx::Request.new
              r.headers_in["MRUBY-HOGE"] = "hogehoge"
              1
            ';

            proxy_pass http://s_rack;
        }

        # check body length
        location /mruby-body-check {
            #mruby_set_code $valid '
            #  r = Nginx::Request.new
            #  r.headers_in["MRUBY-HOGE"] = "hogehoge"
            #  1
            #';
            mruby_set_code $stream_name '
              r = Nginx::Request.new
              if ["POST", "PUT"].include? r.method
                r.body.length < 10 ? "s_rack" : "invalid"
              else
                "s_rack"
              end
            ';

            # FIXME
            proxy_pass http://$stream_name;
            #proxy_pass http://s_rack;
        }

        location /invalid {
            alias /50x.html;
        }

        # test for Nginx::Var
        # http://localhost/nginx_var?name=http_host
        location /nginx_var {
            mruby_content_handler_code '
              r = Nginx::Request.new
              Nginx.echo r.var.send r.var.arg_name.to_sym
              Nginx.return Nginx::HTTP_OK
            ';
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}
